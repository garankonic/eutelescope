<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Thu May 17 15:41:19 2018

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadPreAlignment"/>
      <processor name="ApplyPreAlignment"/>
      <processor name="LoadAlignment1"/>
      <processor name="ApplyAlignment1"/>
      <processor name="LoadAlignment2"/>
      <processor name="ApplyAlignment2"/>
      <processor name="LoadAlignment3"/>
      <processor name="ApplyAlignment3"/>
      <processor name="LoadAlignment4"/>
      <processor name="ApplyAlignment4"/>
      <processor name="LoadAlignment5"/>
      <processor name="ApplyAlignment5"/>
      <processor name="GBLFitter"/>
      <processor name="Save"/>
      <processor name="Ntuple"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @LcioPath@/run@RunNumber@-hitmaker.slcio </parameter>
      <parameter name="GearXMLFile" value="@GearFilePath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@MaxRecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="@Verbosity@"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistogramPath@/@RunNumber@-tracking-gbl"/>
  <!-- type of output file root (default) or xml )-->
  <parameter name="FileType" type="string" value="root"/>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadPreAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> prealignment @DatabasePath@/run@RunNumber@-prealignment.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyPreAlignment" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> prealignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> PreAlignedHit </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment1" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment1 @DatabasePath@/run@RunNumber@-alignment-1-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyAlignment1" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment1 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> PreAlignedHit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit1 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment2" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment2 @DatabasePath@/run@RunNumber@-alignment-2-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyAlignment2" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment2 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit1 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit2 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment3" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment3 @DatabasePath@/run@RunNumber@-alignment-3-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyAlignment3" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment3 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit2 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit3 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment4" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment4 @DatabasePath@/run@RunNumber@-alignment-4-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyAlignment4" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment4 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit3 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit4 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="LoadAlignment5" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:align:tel"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment5 @DatabasePath@/run@RunNumber@-alignment-5-gbl.slcio alignment </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG0"/>
</processor>

 <processor name="ApplyAlignment5" type="EUTelProcessorApplyAlignment">
 <!--Apply alignment constants to hit collection-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment5 </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit4 </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> AlignedHit5 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="GBLFitter" type="EUTelMilleGBL">
 <!--EUTelMilleGBL searches for tracks and fits them with GBL. Tracks are passed to MILLEPEDE II to get alignment constants and the fitted tracks, the fitted hits and the alignment constants are written to LCIO for possible further analysis.-->
  <!--Input hit collections names.-->
  <parameter name="HitCollectionName" type="string" lcioInType="TrackerHit"> AlignedHit5 </parameter>
  <!--Number of alignment constants used. Available modes are: 1: shift in Z only. 2: shifts in X and Y. 3: shifts in X and Y and rotation around the Z axis, 4: shifts in X,Y and Z and rotation around the Z axis. 5: shifts in X,Y and rotations around all axis, fix Z. 6: shifts in X,Y and Z and rotations around all axis. 7: Shifts in X, Y and Z. Note that in modes 5 and 6, alignment constants in alpha and beta will only be returned for rotated/tilted sensors.-->
  <parameter name="AlignMode" type="int" value="5"/>
  <!--All alignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: alignment1 alignment2 etc.-->
  <parameter name="AlignmentCollectionName" type="StringVec"> alignment1 alignment2 alignment3 alignment4 alignment5 </parameter>
  <!--This is the name of the alignment collection to be saved into the lcio file.-->
  <parameter name="AlignmentConstantCollectionName" type="string" value="alignment"/>
  <!--This is the name of the LCIO file name with the output alignment generated by this processor.-->
  <parameter name="AlignmentConstantLCIOFile" type="string" value="@DatabasePath@/run@RunNumber@-alignment-x-gbl.slcio"/>
  <!--The name of the Millepede binary output file.-->
  <parameter name="BinaryFilename" type="string" value="@DatabasePath@/run@RunNumber@-align-mille-x-gbl.bin"/>
  <!--Cut in Chi2/Ndf, tracks below are accepted.-->
  <parameter name="Chi2NdfCut" type="double" value="10"/>
  <!--The coordinator step PreAlignment to be loaded.-->
  <!--parameter name="CoordinatorPreAlignmentCollectionName" type="string" value="coordinatorprealignment"/-->
  <!--Method with which to get the DUT fit position: 0 = centre of the DUT (bad if DUT is rotated), 1 = extrapolate from triplet and get intersect with plane, 2 = extrapolate from driplet, 3 = get average from methods 1 and 2.-->
  <parameter name="DUTFitMethod" type="int" value="1"/>
  <!--DUT resolution in x [um].-->
  <parameter name="DUTResX" type="double" value="25"/>
  <!--DUT resolution in y [um].-->
  <parameter name="DUTResY" type="double" value="200"/>
  <!--Do an additional DUT alignment after track search? 1 = DUT alignment in alpha, 2 = DUT alignment in beta, 3 = DUT alignment in gamma with unsensitive x-axis, 4 = DUT alignment in gamma with unsensitive y-axis, 0 = no additional alignment.-->
  <!--parameter name="DoDUTAlignment" type="int" value="0"/-->
  <!--Use this processor to do Prealignment? In this case, no tracking is performed. 1 = yes, 0 = no, 2 = yes, with zero Prealignment, aka output an alignment file with zeros to preserve file structure.-->
  <!--parameter name="DoPreAlignment" type="int" value="0"/-->
  <!--Beam energy in GeV.-->
  <parameter name="Ebeam" type="double" value="@Energy@"/>
  <!--Exclude planes from tracking and alignment, according to their sensor ids.-->
  <!--parameter name="ExcludePlanes" type="IntVec"> </parameter-->
  <!--Fixes the given alignment parameters of a sensor in the fit. For each sensor (even excluded ones) an integer must be specified. If no value or not enough values are given, then all parameters will be free. Bit 0 = x shift, bit 1 = y shift, bit 2 = z shift, bit 3 = alpha, bit 4 = beta, bit 5 = gamma. Note: these numbers are ordered according to the z position of the sensors and NOT according to the sensor id. This can override free parameters from AlignMode.-->
  <!--parameter name="FixParameter" type="IntVec"> </parameter-->
  <!--Fix position of sensor planes in the fit according to their sensor ids.-->
  <parameter name="FixedPlanes" type="IntVec"> 0 1 2 3 4 5 9 </parameter>
  <!--Generate a steering file for pede? 0 = false, 1 = true.-->
  <parameter name="GeneratePedeSteerfile" type="int" value="0"/>
  <!--Maximum allowed hit distance within planes 1 and 4 in um for a hit to be considered isolated.-->
  <!--parameter name="IsolationCut" type="double" value="40"/-->
  <!--The sensor id number of the DUT.-->
  <parameter name="ManualDUTid" type="int" value="30"/>
  <!--Maximal number of track candidates in the whole run, set to less than 0 to deactivate.-->
  <parameter name="MaxTrackCandidatesTotal" type="int" value="10000000"/>
  <!--The name of the output fit hit collection.-->
  <parameter name="OutputHitCollection" type="string" value="fithits"/>
  <!--The name of the output track fit collection.-->
  <parameter name="OutputTrackCollection" type="string" value="tracks6"/>
  <!--Name of the steering file for the pede program.-->
  <parameter name="PedeSteerfileName" type="string" value="@DatabasePath@/run@RunNumber@-pede-steer-x-gbl.txt"/>
  <!--All prealignment collection names which have been applied must be entered here. The order should correspond to their application, i.e.: prealignment1 prealignment2 etc.-->
  <parameter name="PreAlignmentCollectionName" type="StringVec" value="prealignment"/>
  <!--Probability cut, tracks above are accepted.-->
  <parameter name="ProbCut" type="double" value="0.0"/>
  <!--Reference plane resolution in x [um].-->
  <parameter name="REFResX" type="double" value="10"/>
  <!--Reference plane resolution in y [um].-->
  <parameter name="REFResY" type="double" value="10"/>
  <!--Require DUT hit for valid track? 0 = false, 1 = true.-->
  <parameter name="RequireDUTHit" type="int" value="0"/>
  <!--Execute the pede program using the generated steering file? 0 = false, 1 = true.-->
  <parameter name="RunPede" type="int" value="0"/>
  <!--Track slope cut in x, tracks below are accepted.-->
  <!--parameter name="SlopeCutDUTx" type="double" value="10"/-->
  <!--Track slope cut in y, tracks below are accepted.-->
  <!--parameter name="SlopeCutDUTy" type="double" value="10"/-->
  <!--Which sensor IDs belong to the telescope? This should be used if there are non-standard (0,1,2,3,4,5) telescope plane sensor IDs in the setup.-->
  <!--parameter name="TelescopePlanes" type="IntVec"> 0 1 2 3 4 5 </parameter-->
  <!--Telescope resolution in x [um].-->
  <parameter name="TelescopeResX" type="double" value="3.0"/>
  <!--Telescope resolution in y [um].-->
  <parameter name="TelescopeResY" type="double" value="3.0"/>
  <!--Flag to fill dt histograms. Will increase histogram file size quite a bit.-->
  <parameter name="TimeDependencyHistos" type="bool" value="true"/>
  <!--If we use an external track fit, what is the collection name?-->
  <!--parameter name="TrackFitCollectionName" type="string" value="TrackCandidateHitCollection"/-->
  <!--Use Reference Plane? If so, set the sensor id (usually 7). To deactivate, set to below 0.-->
  <parameter name="UseREF" type="int" value="@SetupRef@"/>
  <!--Use external track fit?-->
  <!--parameter name="UseTrackFit" type="bool" value="false"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG9"/>
  <!--Flag to enable X0 scattering histograms. Will need lots of memory!-->
  <!--parameter name="X0Histos" type="bool" value="false"/-->
  <!--Downstream triplet residual cut [um].-->
  <parameter name="driCut" type="double" value="150."/>
  <!--Downstream driplet reference plane residual cut in x [um].-->
  <parameter name="driCutREFx" type="double" value="350"/>
  <!--Downstream driplet reference plane residual cut in y [um].-->
  <parameter name="driCutREFy" type="double" value="350"/>
  <!--Upstream-downstream track matching cut [um].-->
  <parameter name="sixCut" type="double" value="400."/>
  <!--Upstream triplet residual cut [um].-->
  <parameter name="triCut" type="double" value="150."/>
  <!--Upstream triplet DUT residual cut in x [um].-->
  <parameter name="triCutDUTx" type="double" value="250."/>
  <!--Upstream triplet DUT residual cut in y [um].-->
  <parameter name="triCutDUTy" type="double" value="250."/>
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> hit_eta3x3 alignedHit_eta3x3 AlignedHit1 AlignedHit2 AlignedHit3 AlignedHit4 AlignedHit5 AlignedHit6 AlignedHit7 AlignedHit8 AlignedHit9 </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="@LcioPath@/run@RunNumber@-tracking-gbl.slcio"/>
  <!--write mode for output file:  WRITE_APPEND, WRITE_NEW or None-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string" value=""/-->
</processor>

 <processor name="Ntuple" type="EUTelAPIXTbTrackTuple">
 <!--Prepare tbtrack style n-tuple with track fit results-->
  <!--Name of the input Track collection-->
  <parameter name="InputTrackCollectionName" type="string" lcioInType="Track"> tracks6 </parameter>
  <!--Name of the plane-wide hit-data hit collection-->
  <parameter name="InputTrackerHitCollectionName" type="string" lcioInType="TrackerHit"> fithits </parameter>
  <!--Int std::vector containing the IDs of the DUTs-->
  <parameter name="DUTIDs" type="IntVec"> 30 </parameter>
  <!--Int std::vector containing the IDs of the downstream telescope planes-->
  <parameter name="DownstreamTelescopeIDs" type="IntVec"> 3 4 5 </parameter>
  <!--DUT zero surpressed data colection name-->
  <parameter name="DutZsColName" type="string" value="zsdata_ph2"/>
  <!--Path/File where root-file should be stored-->
  <parameter name="OutputPath" type="string" value="NTuple.root"/>
  <!--ID of the reference plane-->
  <parameter name="ReferencePlaneID" type="int" value="9"/>
  <!--Int std::vector containing the IDs of the upstream telescope planes-->
  <parameter name="UpstreamTelescopeIDs" type="IntVec"> 0 1 2 </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <parameter name="Verbosity" type="string" value="DEBUG9"/>
</processor>

</marlin>
